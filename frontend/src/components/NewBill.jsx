import React, { useEffect, useRef, useState } from "react";
import { useReactToPrint } from "react-to-print";
import PrintableBill from "./PrintableBill";
import { useAuth } from "../context/AuthContext"; // Import useAuth hook

const dressTypes = [
    { value: "Chudidhar", label: "Chudidhar" },
    { value: "Blouse", label: "Blouse" },
    { value: "Frock", label: "Frock" },
    { value: "Lehanga", label: "Lehanga" }
];

const measurementsList = {
    Chudidhar: ["Chest", "Waist", "Length", "Shoulder", "Sleeve", "Hip"],
    Blouse: ["Chest", "Waist", "Length", "Shoulder", "Sleeve", "Front Neck", "Back Neck"],
    Frock: ["Length", "Shoulder", "Waist", "Chest", "Hip"],
    Lehanga: ["Waist", "Hip", "Length", "Blouse Chest", "Blouse Waist"]
};

const parts = ["front", "back", "sleeve", "full"]; // Define parts here for consistency

export default function NewBill({ onBillSaved }) { // Accept onBillSaved prop
    const [bill, setBill] = useState({
        // bill_number will now be generated by the backend
        customer_name: "",
        mobile: "",
        dress_type: "Chudidhar", // Default dress type
        order_date: new Date().toISOString().split('T')[0], // Default to today's date
        due_date: "",
        measurements: {},
        extras: [],
        total_value: 0
    });

    const [msg, setMsg] = useState("");
    const [msgType, setMsgType] = useState(""); // 'success' or 'error'
    const [showPrint, setShowPrint] = useState(false);
    const [designs, setDesigns] = useState([]);
    const [selectedDesignUrl, setSelectedDesignUrl] = useState("");
    const [designFetchError, setDesignFetchError] = useState("");
    const [generatedBillNumber, setGeneratedBillNumber] = useState(null); // State to store generated bill number

    const { token, user } = useAuth(); // Get token and user from AuthContext

    const printRef = useRef();
    const handlePrint = useReactToPrint({
        content: () => printRef.current,
        // Use the generatedBillNumber for the document title
        documentTitle: `SewMate_Bill_${generatedBillNumber || 'New'}`
    });

    // Function to reset the form
    const resetForm = () => {
        setBill({
            customer_name: "",
            mobile: "",
            dress_type: "Chudidhar",
            order_date: new Date().toISOString().split('T')[0],
            due_date: "",
            measurements: {},
            extras: [],
            total_value: 0
        });
        setSelectedDesignUrl("");
        setGeneratedBillNumber(null);
        setShowPrint(false);
        setMsg("");
        setMsgType("");
    };

    // Fetch designs based on selected dressType
    useEffect(() => {
        if (!token || !user) {
            setDesignFetchError("Unauthorized: Please log in to view designs.");
            setDesigns([]);
            return;
        }

        fetch(`${process.env.REACT_APP_API_URL}/api/designs?dress_type=${bill.dress_type}`, {
            headers: { Authorization: `Bearer ${token}` }
        })
            .then(res => res.json())
            .then(data => {
                if (Array.isArray(data)) {
                    setDesigns(data);
                    setDesignFetchError("");
                } else {
                    setDesigns([]);
                    setDesignFetchError("Invalid designs data received.");
                }
            })
            .catch(err => {
                console.error("Design fetch error", err);
                setDesigns([]);
                setDesignFetchError("Error fetching designs.");
            });
    }, [token, user, bill.dress_type]); // Re-fetch when dressType changes

    const handleChange = (field, value) => {
        setBill(prev => ({ ...prev, [field]: value }));
    };

    const handleMeasurementInput = (name, value) => {
        setBill(prev => ({
            ...prev,
            measurements: {
                ...prev.measurements,
                [name]: value
            }
        }));
    };

    const calculateTotalValue = (currentExtras) => {
        return currentExtras.reduce((sum, item) => sum + (parseFloat(item.price) || 0), 0);
    };

    const handleAddExtra = () => {
        setBill(prev => {
            const newExtras = [...prev.extras, { name: "", price: 0 }];
            const newTotal = calculateTotalValue(newExtras);
            return {
                ...prev,
                extras: newExtras,
                total_value: newTotal // Update total immediately
            };
        });
    };

    const handleExtraChange = (index, field, value) => {
        setBill(prev => {
            const updatedExtras = [...prev.extras];
            updatedExtras[index][field] = field === "price" ? parseFloat(value) || 0 : value;
            const newTotal = calculateTotalValue(updatedExtras); // Recalculate total
            return {
                ...prev,
                extras: updatedExtras,
                total_value: newTotal // Update total immediately
            };
        });
    };

    const handleSave = async e => {
        e.preventDefault();
        setMsg("");
        setMsgType("");
        setShowPrint(false); // Hide print preview until successful save

        if (!user || !token) {
            setMsg("Shopkeeper not found or not authenticated. Please log in.");
            setMsgType("error");
            return;
        }

        try {
            // Remove bill_number from the payload as it will be generated by the backend
            const { bill_number, ...billDataToSend } = bill; // Destructure to exclude bill_number

            const billPayload = Object.assign({}, billDataToSend, {
                shopkeeper_id: user.id,
                design_url: selectedDesignUrl,
                total_value: bill.total_value // Ensure the latest calculated total_value is sent
            });

            const res = await fetch(`${process.env.REACT_APP_API_URL}/api/bills`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify(billPayload)
            });
            const data = await res.json();
            if (!res.ok) {
                setMsg(data.error || "Failed to save bill");
                setMsgType("error");
            } else {
                setMsg("✅ Bill saved successfully!");
                setMsgType("success");
                setGeneratedBillNumber(data.bill_number); // Store the bill number returned by backend
                setShowPrint(true);

                // Trigger dashboard refresh after successful bill creation
                if (onBillSaved) {
                    onBillSaved();
                }
                // Do NOT reset the form here. The form data will remain for printing.
                // Reset will be triggered by a "New Bill" button or page refresh.
            }
        } catch (err) {
            console.error("Save bill error:", err); // Log the actual error
            setMsg("Network error. Please try again.");
            setMsgType("error");
        }
    };

    const selectedMeasurements = measurementsList[bill.dress_type] || [];

    return (
        <div className="p-6 bg-gradient-to-br from-blue-50 to-green-50 min-h-screen font-inter">
            <h2 className="text-4xl font-extrabold text-indigo-800 mb-8 rounded-xl p-4 bg-white shadow-xl text-center animate-fade-in flex items-center justify-center">
                <img
                    src="https://placehold.co/50x50/818cf8/ffffff?text=Bill"
                    alt="New Bill Icon"
                    className="h-12 w-12 rounded-full mr-4 shadow-md"
                    onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/50x50/cccccc/333333?text=Err'; }}
                />
                🧾 New Bill Entry
            </h2>

            <form className="space-y-6 bg-white p-8 rounded-xl shadow-xl animate-fade-in-up" onSubmit={handleSave}>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Customer Name */}
                    <input
                        type="text"
                        placeholder="Customer Name"
                        className="border border-gray-300 p-3 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200"
                        value={bill.customer_name}
                        onChange={e => handleChange("customer_name", e.target.value)}
                        required
                    />
                    {/* Mobile */}
                    <input
                        type="tel" // Use type="tel" for mobile numbers
                        placeholder="Mobile"
                        className="border border-gray-300 p-3 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200"
                        value={bill.mobile}
                        onChange={e => handleChange("mobile", e.target.value)}
                        pattern="[0-9]{10}" // Basic pattern for 10 digits
                        title="Mobile number must be 10 digits"
                        required
                    />
                    {/* Dress Type */}
                    <select
                        value={bill.dress_type}
                        onChange={e => handleChange("dress_type", e.target.value)}
                        className="border border-gray-300 p-3 rounded-lg w-full bg-white focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200"
                        required
                    >
                        {dressTypes.map(d => (
                            <option key={d.value} value={d.value}>
                                {d.label}
                            </option>
                        ))}
                    </select>
                    {/* Order Date */}
                    <label className="block text-sm font-medium text-gray-700">Order Date:
                        <input
                            type="date"
                            className="border border-gray-300 p-3 rounded-lg w-full mt-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200"
                            value={bill.order_date}
                            onChange={e => handleChange("order_date", e.target.value)}
                            required
                        />
                    </label>
                    {/* Due Date */}
                    <label className="block text-sm font-medium text-gray-700">Due Date:
                        <input
                            type="date"
                            className="border border-gray-300 p-3 rounded-lg w-full mt-1 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200"
                            value={bill.due_date}
                            onChange={e => handleChange("due_date", e.target.value)}
                            required
                        />
                    </label>
                </div>

                {/* Measurements */}
                <div>
                    <h3 className="font-bold text-xl text-gray-800 mb-3 flex items-center">
                        <span className="mr-2 text-2xl">📏</span> Measurements (No price)
                    </h3>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                        {selectedMeasurements.map(m => (
                            <input
                                key={m}
                                type="text"
                                placeholder={m}
                                className="border border-gray-300 p-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-400 transition-all duration-200"
                                value={bill.measurements[m] || ""}
                                onChange={e => handleMeasurementInput(m, e.target.value)}
                            />
                        ))}
                    </div>
                </div>

                {/* Extras */}
                <div>
                    <div className="flex justify-between items-center mb-3">
                        <h3 className="font-bold text-xl text-gray-800 flex items-center">
                            <span className="mr-2 text-2xl">➕</span> Additional Items (with price)
                        </h3>
                        <button
                            type="button"
                            onClick={handleAddExtra}
                            className="px-4 py-2 bg-blue-500 text-white rounded-full shadow-md hover:bg-blue-600 transition-all duration-200 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-300"
                        >
                            + Add Item
                        </button>
                    </div>
                    {bill.extras.length === 0 && (
                        <p className="text-gray-500 italic text-center py-2">Click "Add Item" to add extras.</p>
                    )}
                    {bill.extras.map((extra, index) => (
                        <div key={index} className="flex gap-4 mb-3 items-center bg-gray-50 p-3 rounded-lg shadow-sm">
                            <input
                                type="text"
                                placeholder="Item Name"
                                className="border border-gray-300 p-2 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200"
                                value={extra.name}
                                onChange={e => handleExtraChange(index, "name", e.target.value)}
                            />
                            <input
                                type="number"
                                placeholder="₹ Price"
                                className="border border-gray-300 p-2 rounded-lg w-32 focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-200"
                                value={extra.price}
                                onChange={e => handleExtraChange(index, "price", e.target.value)}
                            />
                        </div>
                    ))}
                </div>

                {/* Design Selector */}
                <div>
                    <h3 className="font-bold text-xl text-gray-800 mb-3 flex items-center">
                        <span className="mr-2 text-2xl">🎨</span> Choose Design (optional) - <span className="text-indigo-700 ml-1">{bill.dress_type}</span>
                    </h3>
                    {designFetchError && (
                        <div className="bg-red-100 border border-red-300 text-red-700 p-3 rounded-lg mb-4 shadow-md animate-slide-down">
                            ❌ {designFetchError}
                        </div>
                    )}
                    <div className="flex gap-4 flex-wrap justify-center">
                        {designs.length === 0 && !designFetchError ? (
                            <div className="text-gray-500 italic text-center py-4">
                                <p>No uploaded designs available for {bill.dress_type}.</p>
                                <img
                                    src="https://placehold.co/100x100/f0f9ff/3b82f6?text=No+Design"
                                    alt="No Designs Icon"
                                    className="mx-auto mt-4 rounded-full shadow-sm"
                                    onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/100x100/cccccc/333333?text=Error'; }}
                                />
                            </div>
                        ) : (
                            designs.map(design => (
                                <div
                                    key={design.id}
                                    className={`relative border-2 rounded-lg cursor-pointer p-1 transition-all duration-300 transform hover:scale-105 hover:shadow-lg
                                        ${selectedDesignUrl === `${process.env.REACT_APP_API_URL}${design.image_url}`
                                            ? "ring-4 ring-indigo-600 border-indigo-600 shadow-xl"
                                            : "border-gray-300 shadow-md"
                                        }`}
                                    onClick={() => setSelectedDesignUrl(`${process.env.REACT_APP_API_URL}${design.image_url}`)}
                                >
                                    <img
                                        src={`${process.env.REACT_APP_API_URL}${design.image_url}`}
                                        alt={design.name}
                                        className="h-28 w-28 object-cover rounded-md"
                                        onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/112x112/cccccc/333333?text=No+Image"; }} // Fallback
                                    />
                                    <div className="text-center text-xs mt-1 font-medium">{design.name} ({design.part})</div>
                                    {selectedDesignUrl === `${process.env.REACT_APP_API_URL}${design.image_url}` && (
                                        <div className="absolute top-1 right-1 bg-indigo-600 text-white rounded-full p-1 text-xs">
                                            ✔
                                        </div>
                                    )}
                                </div>
                            ))
                        )}
                    </div>
                </div>

                <div className="text-3xl font-bold text-green-700 mt-6 p-4 bg-green-50 rounded-lg shadow-md text-center">
                    Total: ₹{bill.total_value.toLocaleString("en-IN")}
                </div>

                <div className="flex flex-wrap gap-4 mt-6 justify-center">
                    <button
                        type="submit"
                        className="bg-green-600 text-white px-6 py-3 rounded-full font-semibold shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-300 focus:ring-opacity-75"
                    >
                        💾 Save & Show Print Preview
                    </button>

                    {showPrint && (
                        <>
                            <button
                                type="button"
                                onClick={handlePrint}
                                className="bg-blue-600 text-white px-6 py-3 rounded-full font-semibold shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-opacity-75"
                            >
                                🖨️ Print Bill
                            </button>
                            <button
                                type="button"
                                onClick={resetForm} // New button to reset the form
                                className="bg-gray-500 text-white px-6 py-3 rounded-full font-semibold shadow-lg transition-all duration-300 ease-in-out transform hover:scale-105 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-opacity-75"
                            >
                                ✨ New Bill
                            </button>
                        </>
                    )}
                </div>

                {msg && (
                    <div className={`mt-4 p-3 rounded-lg font-medium text-center animate-slide-down
                        ${msgType === "success" ? "bg-green-100 text-green-700 border border-green-300 shadow-md" : "bg-red-100 text-red-700 border border-red-300 shadow-md"}`}
                    >
                        {msg}
                    </div>
                )}
            </form>

            {showPrint && generatedBillNumber && ( // Only show printable bill if bill number is generated
                <div className="mt-8 bg-white p-8 rounded-xl shadow-xl animate-fade-in-up">
                    <h3 className="text-2xl font-bold text-center text-indigo-700 mb-6">Print Preview</h3>
                    <div ref={printRef}>
                        {/* Pass the generated bill number to PrintableBill */}
                        <PrintableBill bill={{ ...bill, bill_number: generatedBillNumber, design_url: selectedDesignUrl }} />
                    </div>
                </div>
            )}
            {/* Basic CSS for animations (can be moved to index.css or a dedicated styles file) */}
            <style>
                {`
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(-20px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                @keyframes slideDown {
                    from { opacity: 0; transform: translateY(-10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                @keyframes pulse {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.7; }
                }
                @keyframes fadeInUp {
                    from { opacity: 0; transform: translateY(20px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .animate-fade-in-up {
                    animation: fadeInUp 0.7s ease-out forwards;
                }
                .animate-fade-in {
                    animation: fadeIn 0.8s ease-out forwards;
                }
                .animate-slide-down {
                    animation: slideDown 0.5s ease-out forwards;
                }
                .animate-pulse {
                    animation: pulse 1.5s infinite ease-in-out;
                }
                `}
            </style>
        </div>
    );
}
