import React, { useEffect, useRef, useState } from "react";
import { useReactToPrint } from "react-to-print";
import PrintableBill from "./PrintableBill";
import { useAuth } from "../context/AuthContext"; // Import useAuth hook

const dressTypes = [
    { value: "Chudidhar", label: "Chudidhar" },
    { value: "Blouse", label: "Blouse" },
    { value: "Frock", label: "Frock" },
    { value: "Lehanga", label: "Lehanga" }
];

const measurementsList = {
    Chudidhar: ["Chest", "Waist", "Length", "Shoulder", "Sleeve", "Hip"],
    Blouse: ["Chest", "Waist", "Length", "Shoulder", "Sleeve", "Front Neck", "Back Neck"],
    Frock: ["Length", "Shoulder", "Waist", "Chest", "Hip"],
    Lehanga: ["Waist", "Hip", "Length", "Blouse Chest", "Blouse Waist"]
};

const parts = ["front", "back", "sleeve", "full"]; // Define parts here for consistency

export default function NewBill({ onBillSaved }) { // Accept onBillSaved prop
    const [bill, setBill] = useState({
        // bill_number will now be generated by the backend
        customer_name: "",
        mobile: "",
        dress_type: "Chudidhar", // Default dress type
        order_date: new Date().toISOString().split('T')[0], // Default to today's date
        due_date: "",
        measurements: {},
        extras: [],
        total_value: 0
    });

    const [msg, setMsg] = useState("");
    const [showPrint, setShowPrint] = useState(false);
    const [designs, setDesigns] = useState([]);
    const [selectedDesignUrl, setSelectedDesignUrl] = useState("");
    const [designFetchError, setDesignFetchError] = useState("");
    const [generatedBillNumber, setGeneratedBillNumber] = useState(null); // State to store generated bill number

    const { token, user } = useAuth(); // Get token and user from AuthContext

    const printRef = useRef();
    const handlePrint = useReactToPrint({
        content: () => printRef.current,
        // Use the generatedBillNumber for the document title
        documentTitle: `SewMate_Bill_${generatedBillNumber || 'New'}`
    });

    // Function to reset the form
    const resetForm = () => {
        setBill({
            customer_name: "",
            mobile: "",
            dress_type: "Chudidhar",
            order_date: new Date().toISOString().split('T')[0],
            due_date: "",
            measurements: {},
            extras: [],
            total_value: 0
        });
        setSelectedDesignUrl("");
        setGeneratedBillNumber(null);
        setShowPrint(false);
        setMsg("");
    };

    // Fetch designs based on selected dressType
    useEffect(() => {
        if (!token || !user) {
            setDesignFetchError("Unauthorized: Please log in to view designs.");
            setDesigns([]);
            return;
        }

        fetch(`${process.env.REACT_APP_API_URL}/api/designs?dress_type=${bill.dress_type}`, {
            headers: { Authorization: `Bearer ${token}` }
        })
            .then(res => res.json())
            .then(data => {
                if (Array.isArray(data)) {
                    setDesigns(data);
                    setDesignFetchError("");
                } else {
                    setDesigns([]);
                    setDesignFetchError("Invalid designs data received.");
                }
            })
            .catch(err => {
                console.error("Design fetch error", err);
                setDesigns([]);
                setDesignFetchError("Error fetching designs.");
            });
    }, [token, user, bill.dress_type]); // Re-fetch when dressType changes

    const handleChange = (field, value) => {
        setBill(prev => ({ ...prev, [field]: value }));
    };

    const handleMeasurementInput = (name, value) => {
        setBill(prev => ({
            ...prev,
            measurements: {
                ...prev.measurements,
                [name]: value
            }
        }));
    };

    const calculateTotalValue = (currentExtras) => {
        return currentExtras.reduce((sum, item) => sum + (parseFloat(item.price) || 0), 0);
    };

    const handleAddExtra = () => {
        setBill(prev => {
            const newExtras = [...prev.extras, { name: "", price: 0 }];
            const newTotal = calculateTotalValue(newExtras);
            return {
                ...prev,
                extras: newExtras,
                total_value: newTotal // Update total immediately
            };
        });
    };

    const handleExtraChange = (index, field, value) => {
        setBill(prev => {
            const updatedExtras = [...prev.extras];
            updatedExtras[index][field] = field === "price" ? parseFloat(value) || 0 : value;
            const newTotal = calculateTotalValue(updatedExtras); // Recalculate total
            return {
                ...prev,
                extras: updatedExtras,
                total_value: newTotal // Update total immediately
            };
        });
    };

    const handleSave = async e => {
        e.preventDefault();
        setMsg("");
        setShowPrint(false); // Hide print preview until successful save

        if (!user || !token) {
            setMsg("Shopkeeper not found or not authenticated. Please log in.");
            return;
        }

        try {
            // Remove bill_number from the payload as it will be generated by the backend
            const { bill_number, ...billDataToSend } = bill; // Destructure to exclude bill_number

            const billPayload = Object.assign({}, billDataToSend, {
                shopkeeper_id: user.id,
                design_url: selectedDesignUrl,
                total_value: bill.total_value // Ensure the latest calculated total_value is sent
            });

            const res = await fetch(`${process.env.REACT_APP_API_URL}/api/bills`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                },
                body: JSON.stringify(billPayload)
            });
            const data = await res.json();
            if (!res.ok) {
                setMsg(data.error || "Failed to save bill");
            } else {
                setMsg("‚úÖ Bill saved successfully!");
                setGeneratedBillNumber(data.bill_number); // Store the bill number returned by backend
                setShowPrint(true);

                // Trigger dashboard refresh after successful bill creation
                if (onBillSaved) {
                    onBillSaved();
                }
                // Do NOT reset the form here. The form data will remain for printing.
                // Reset will be triggered by a "New Bill" button or page refresh.
            }
        } catch (err) {
            console.error("Save bill error:", err); // Log the actual error
            setMsg("Network error. Please try again.");
        }
    };

    const selectedMeasurements = measurementsList[bill.dress_type] || [];

    return (
        <div className="p-6 bg-gray-50 min-h-screen">
            <h2 className="text-2xl font-bold text-indigo-700 mb-4">üßæ New Bill Entry</h2>

            <form className="space-y-4 bg-white p-6 rounded shadow-md" onSubmit={handleSave}>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* Removed bill_number input field as it's auto-generated */}
                    <input
                        type="text"
                        placeholder="Customer Name"
                        className="border p-2 rounded w-full"
                        value={bill.customer_name}
                        onChange={e => handleChange("customer_name", e.target.value)}
                        required
                    />
                    <input
                        type="text"
                        placeholder="Mobile"
                        className="border p-2 rounded w-full"
                        value={bill.mobile}
                        onChange={e => handleChange("mobile", e.target.value)}
                        required
                    />
                    <select
                        value={bill.dress_type}
                        onChange={e => handleChange("dress_type", e.target.value)}
                        className="border p-2 rounded w-full"
                    >
                        {dressTypes.map(d => (
                            <option key={d.value} value={d.value}>
                                {d.label}
                            </option>
                        ))}
                    </select>
                    <label className="block text-sm font-medium text-gray-700">Order Date:
                        <input
                            type="date"
                            className="border p-2 rounded w-full"
                            value={bill.order_date}
                            onChange={e => handleChange("order_date", e.target.value)}
                            required
                        />
                    </label>
                    <label className="block text-sm font-medium text-gray-700">Due Date:
                        <input
                            type="date"
                            className="border p-2 rounded w-full"
                            value={bill.due_date}
                            onChange={e => handleChange("due_date", e.target.value)}
                            required
                        />
                    </label>
                </div>

                {/* Measurements */}
                <div>
                    <h3 className="font-semibold text-gray-700 mb-2">üìè Measurements (No price)</h3>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                        {selectedMeasurements.map(m => (
                            <input
                                key={m}
                                type="text"
                                placeholder={m}
                                className="border p-2 rounded"
                                value={bill.measurements[m] || ""}
                                onChange={e => handleMeasurementInput(m, e.target.value)}
                            />
                        ))}
                    </div>
                </div>

                {/* Extras */}
                <div>
                    <div className="flex justify-between items-center mb-2">
                        <h3 className="font-semibold text-gray-700">‚ûï Additional Items (with price)</h3>
                        <button
                            type="button"
                            onClick={handleAddExtra}
                            className="text-sm text-blue-600 hover:underline"
                        >
                            + Add Item
                        </button>
                    </div>
                    {bill.extras.map((extra, index) => (
                        <div key={index} className="flex gap-2 mb-2">
                            <input
                                type="text"
                                placeholder="Item"
                                className="border p-2 rounded w-full"
                                value={extra.name}
                                onChange={e => handleExtraChange(index, "name", e.target.value)}
                            />
                            <input
                                type="number"
                                placeholder="‚Çπ"
                                className="border p-2 rounded w-28"
                                value={extra.price}
                                onChange={e => handleExtraChange(index, "price", e.target.value)}
                            />
                        </div>
                    ))}
                </div>

                {/* Design Selector */}
                <div>
                    <h3 className="font-semibold text-gray-700 mb-2">üé® Choose Design (optional) - {bill.dress_type}</h3>
                    {designFetchError && (
                        <p className="text-red-600 text-sm mb-2">{designFetchError}</p>
                    )}
                    <div className="flex gap-4 flex-wrap">
                        {designs.length === 0 && !designFetchError ? (
                            <p className="text-gray-500">No uploaded designs available for {bill.dress_type}.</p>
                        ) : (
                            designs.map(design => (
                                <div
                                    key={design.id}
                                    className={`border rounded cursor-pointer p-1 ${
                                        selectedDesignUrl === design.image_url
                                            ? "ring-2 ring-indigo-600"
                                            : "hover:ring"
                                    }`}
                                    onClick={() => setSelectedDesignUrl(design.image_url)}
                                >
                                    <img
                                        src={`${process.env.REACT_APP_API_URL}${design.image_url}`} {/* Use full URL for images */}
                                        alt={design.name}
                                        className="h-24 w-24 object-cover rounded"
                                        onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/96x96/cccccc/333333?text=No+Image"; }} // Fallback
                                    />
                                    <div className="text-center text-xs mt-1">{design.name} ({design.part})</div> {/* Show design name and part */}
                                </div>
                            ))
                        )}
                    </div>
                </div>

                <div className="text-lg font-semibold mt-4">
                    Total: ‚Çπ{bill.total_value.toLocaleString("en-IN")}
                </div>

                <div className="flex flex-wrap gap-4 mt-4">
                    <button
                        type="submit"
                        className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded"
                    >
                        üíæ Save & Show Print Preview
                    </button>

                    {showPrint && (
                        <>
                            <button
                                type="button"
                                onClick={handlePrint}
                                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
                            >
                                üñ®Ô∏è Print Bill
                            </button>
                            <button
                                type="button"
                                onClick={resetForm} // New button to reset the form
                                className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded"
                            >
                                ‚ú® New Bill
                            </button>
                        </>
                    )}
                </div>

                {msg && <div className="mt-2 text-blue-600">{msg}</div>}
            </form>

            {showPrint && generatedBillNumber && ( // Only show printable bill if bill number is generated
                <div className="mt-8">
                    <div ref={printRef} className="bg-white p-6 rounded shadow">
                        {/* Pass the generated bill number to PrintableBill */}
                        <PrintableBill bill={{ ...bill, bill_number: generatedBillNumber, design_url: selectedDesignUrl }} />
                    </div>
                </div>
            )}
        </div>
    );
}
